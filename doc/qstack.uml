@startuml
class Context {
  Element[] stack
  int sp, fp, nest
  Map<String, Element> globals
  Consumer<String> output, trace
}
interface Element {
  +void execute(Context context)
}
interface Traceable
interface Value
interface Ordered
interface Comparable<Element>
interface Iterable<Element>
class Int {
  +int value
}
class Bool {
  +boolean value
}
class Str {
  +String value
}
class Array {
  +Element[] array
}
interface List {
  {static} List NIL
}
class Quote
class Symbol {
  +String name
}
class Reader {
  +Element read()
}
class Block {
  +int args, returns
}
Element <|-- Traceable
Traceable <|-- Value
Cons --> Element : car
Cons --> Element : cdr
Quote --> Element : value
Traceable <|-- List
Iterable <|-- List
Value <|-- Ordered
Value <|.. Quote
Comparable <|-- Ordered
Ordered <|.. Int
Ordered <|.. Bool
Ordered <|.. Str
Value <|.. Array
List <|.. Cons
Cons <|-- Block
Traceable <|.. Symbol
@enduml